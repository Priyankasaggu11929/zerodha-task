---

- hosts: all
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
    sysctl_file: "/etc/sysctl.d/00-ansible.conf"
    sysctl_config:
      - token: fs.protected_hardlinks
        value: 1
        comment: provides protection from ToCToU races
      - token: fs.protected_symlinks
        value: 1
        comment: provides protection from ToCToU races
      - token: kernel.kptr_restrict
        value: 1
        comment: makes locating kernel addresses more difficult
      - token: kernel.perf_event_paranoid
        value: 2
        comment: set perf only available to root
      - token: kernel.randomize_va_space
        value: 2
        comment: randomize addresses of mmap base, heap, stack, and VDSO page
      - token: net.core.rmem_default
        value: 16777216
      - token: net.core.wmem_default
        value: 16777216
      - token: net.core.rmem_max
        value: 16777216
      - token: net.core.wmem_max
        value: 16777216
      - token: net.core.optmem_max
        value: 40960
      - token: net.core.netdev_max_backlog
        value: 50000
      - token: net.ipv4.tcp_max_syn_backlog
        value: 30000
      - token: net.ipv4.tcp_max_tw_buckets
        value: 2000000
      - token: net.ipv4.tcp_rmem
        value: '4096 87380 16777216'
      - token: net.ipv4.tcp_wmem
        value: '4096 87380 16777216'
      - token: net.ipv4.tcp_mtu_probing
        value: 1
      - token: net.ipv4.tcp_fin_timeout
        value: 10
      - token: net.ipv4.tcp_rfc1337
        value: 1
      - token: net.ipv4.tcp_tw_reuse
        value: 1
      - token: net.ipv4.tcp_slow_start_after_idle
        value: 0
      - token: net.ipv4.tcp_syncookies
        value: 1
        comment: enables syn flood protection
      - token: net.ipv4.udp_rmem_min
        value: 8192
      - token: net.ipv4.udp_wmem_min
        value: 8192
      - token: net.ipv4.conf.all.accept_redirects
        value: 0
        comment: ignore ICMP redirects
      - token: net.ipv4.conf.all.accept_source_route
        value: 0
        comment: ignore source-routed packets
      - token: net.ipv4.conf.all.log_martians
        value: 1
      - token: net.ipv4.conf.all.secure_redirects
        value: 1
        comment: ignore ICMP redirects from non-gateway hosts
      - token: net.ipv4.conf.all.send_redirects
        value: 0
      - token: net.ipv4.conf.all.rp_filter
        value: 1
      - token: net.ipv4.conf.default.accept_redirects
        value: 0
        comment: ignore ICMP redirects
      - token: net.ipv4.conf.default.accept_source_route
        value: 0
        comment: ignore source-routed packets
      - token: net.ipv4.conf.default.log_martians
        value: 1
      - token: net.ipv4.conf.default.secure_redirects
        value: 1
        comment: ignore ICMP redirects from non-gateway hosts
      - token: net.ipv4.conf.default.send_redirects
        value: 0
      - token: net.ipv4.conf.default.rp_filter
        value: 1
      - token: net.ipv4.icmp_ignore_bogus_error_responses
        value: 1
      - token: net.ipv4.ip_forward
        value: 0
        comment: do not allow IP forwarding between networks
      - token: vm.swappiness
        value: 10

  tasks:
   
  - name: Change hostname of VM to `demo-ops`!
    hostname:
      name: "demo-ops"
    become: yes
    become_method: "sudo"

  - name: Make sure we have a 'wheel' group
    group:
      name: wheel
      state: present
  
  - name: Allow 'wheel' group to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'
  
  - name: Add `demo` (sudoer) user to wheel group
    user: name=demo groups=wheel append=yes state=present createhome=yes
  
#   - name: Set up authorized keys for the `demo` user
#     authorized_key: user=demo key="{{item}}"
#     with_file:
#       - /home/priyankasaggu119/.ssh/id_rsa.pub

  - name: modify nofile soft limit for the user `demo`
    pam_limits:
      domain: demo
      limit_type: soft
      limit_item: nofile
      value: 64000

  - name: Change various sysctl-settings
    become: true
    sysctl:
      name: "{{ item.token }}"
      value: "{{ item.value }}"
      state: present
      sysctl_file: "{{ sysctl_file }}"
      reload: yes
    with_items: "{{ sysctl_config }}"
    tags: sysctl

  - name: Set the system's timezone to "Asia/Kolkata"! 
    timezone:
      name: Asia/Kolkata
      rtc: local
    become: yes
    become_method: "sudo"

  - service:
      name: systemd-timesyncd
      state: started
      enabled: true

  - name: Install prerequisites for Docker repository
    apt:
      name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg2', 'software-properties-common']
      update_cache: yes

  - name: Add Docker GPG key
    apt_key: url=https://download.docker.com/linux/ubuntu/gpg

  - name: Add Docker APT repository
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/{{ansible_distribution|lower}} {{ansible_distribution_release}} stable

  - name: Install Docker CE
    apt:
      name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
      update_cache: yes

  - name: Install prerequisites for docker-compose
    apt:
      name: ['python3-pip', 'python3-setuptools', 'virtualenv']

  - name: Install docker-compose
    pip:
      name: docker-compose

  - name: copy file to remote host
    copy:
      src: ../application/
      dest: /etc/demo-ops     
 
  - name: (Working directory changed to `/etc/demo-ops`) Starting the server...
    shell: docker-compose up
    args:
      chdir: /etc/demo-ops  
